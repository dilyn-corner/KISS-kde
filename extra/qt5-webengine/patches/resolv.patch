--- a/src/3rdparty/chromium/net/dns/dns_reloader.cc
+++ b/src/3rdparty/chromium/net/dns/dns_reloader.cc
@@ -9,6 +9,10 @@
 
 #include <resolv.h>
 
+#if !defined(__GLIBC__)
+#include "resolv_compat.h"
+#endif
+
 #include "base/lazy_instance.h"
 #include "base/macros.h"
 #include "base/notreached.h"
--- a/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
+++ b/src/3rdparty/chromium/net/dns/dns_config_service_posix.cc
@@ -8,6 +8,10 @@
 #include <string>
 #include <type_traits>
 
+#if !defined(__GLIBC__)
+#include "resolv_compat.h"
+#endif
+
 #include "base/bind.h"
 #include "base/files/file.h"
 #include "base/files/file_path.h"
--- a/dev/null
+++ b/src/3rdparty/chromium/net/dns/resolv_compat.h
@@ -0,0 +1,29 @@
+#if !defined(__GLIBC__)
+/***************************************************************************
+ * resolv_compat.h
+ *
+ * Mimick GLIBC's res_ninit() and res_nclose() for musl libc
+ * Note: res_init() is actually deprecated according to
+ * http://docs.oracle.com/cd/E36784_01/html/E36875/res-nclose-3resolv.html
+ **************************************************************************/
+#include <string.h>
+
+static inline int res_ninit(res_state statp)
+{
+   int rc = res_init();
+   if (statp != &_res) {
+       memcpy(statp, &_res, sizeof(*statp));
+   }
+   return rc;
+}
+
+static inline int res_nclose(res_state statp)
+{
+   if (!statp)
+       return -1;
+   if (statp != &_res) {
+       memset(statp, 0, sizeof(*statp));
+   }
+   return 0;
+}
+#endif
